class Ek_NavMesh:Av_Graph play{
    // Array<Ek_NavSector> Sectors;

    Av_Plan GetPath(Sector curSector, Sector goalSector){
        return GetPlan(nodes[curSector.Index()], nodes[goalSector.Index()]);
    }

    void BuildNodes(Actor basis){
        Nodes.Resize(Level.Sectors.Size());
        for(int i=0; i<Nodes.Size(); i++){
            Sector Ref=Level.Sectors[i];
            SecPlane Floor=Ref.FloorPlane, Ceiling=Ref.CeilingPlane;
            if(Ref.FindLowestCeilingPoint()-Ref.FindHighestFloorPoint()<basis.Height)
                continue;
            Nodes[i]=Ek_NavSector.Create(Ref);
        }

        for(int i=0; i<Level.Lines.Size(); i++){
            Line Line=Level.Lines[i];
            if((Line.Flags & (Line.ML_BLOCKING | Line.ML_BLOCKMONSTERS | Line.ML_BLOCKEVERYTHING)) || (~Line.Flags & Line.ML_TWOSIDED))
                continue;
            Ek_NavSector Front=Ek_NavSector(Nodes[Line.frontSector.Index()]),
                       Back=Ek_NavSector(Nodes[Line.backSector.Index()]);
            if(!Front || !Back)
                continue;
            Sector FRef=Front.Ref,
                   BRef=Back.Ref;
            // if(FRef.)
            Front.Edges.Push(Ek_NavLine.Create(Front, Back, Line));
            Back.Edges.Push(Ek_NavLine.Create(Back, Front, Line));
        }

        for(int i=0; i<Nodes.Size(); i++){
            if(!Nodes[i])
                continue;
            if(!Nodes[i].Edges.Size())
                Nodes[i]=null;
        }
    }
}

class Ek_NavSector:Av_Node{
    int Index;

    Vector3 Center;

    Sector Ref;

    SecPlane Floor,
             Ceiling;

    static
    Ek_NavSector Create(Sector Ref){
        Ek_NavSector Result=Ek_NavSector(Av_Node.Create('Ek_NavSector'));
        Vector2 CenterSpot=Ref.CenterSpot;
        Result.Center=Av_Calc.V2().ToV3(CenterSpot, Ref.FloorPlane.ZAtPoint(CenterSpot));
        Result.Ref=Ref;
        Result.Floor=Ref.FloorPlane;
        Result.Ceiling=Ref.CeilingPlane;
        return Result;
    }

    override
    double DistanceTo(Av_Node other){
        Ek_NavSector Actual=Ek_NavSector(Other);
        if(!Actual)
            Error("Attempted to connect non-Ek_PathNode");
        return level.Vec3Diff(Center, Actual.Center).Length();
    }
}

class Ek_NavLine:Av_Edge{
    int Flags;

    Vector3 Midpoint;

    Line Ref;

    static
    Ek_NavLine Create(Ek_NavSector from, Ek_NavSector to, Line ref){
        Ek_NavLine Result=Ek_NavLine(Av_Edge.Create('Ek_NavLine', From, To));
        Result.Flags=ref.flags;
        Result.Midpoint=Av_Calc.V3().Midpoint(From.Center, To.Center);
        Result.Ref=ref;
        return Result;
    }
}