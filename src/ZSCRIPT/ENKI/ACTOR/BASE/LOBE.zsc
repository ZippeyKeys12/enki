class Ek_Lobe play abstract{
    Ek_Actor Owner;

    static
    Ek_Lobe Create(class<Ek_Lobe> type, Ek_Actor owner){
        let result=Ek_Lobe(new(type));
        result.Owner=Owner;
        result.Init();
        return result;
    }

    virtual
    void Init(){}

    virtual
    void Think(){}

    virtual
    void Tick(){}
}

class Ek_SensorLobe:Ek_Lobe abstract{
    Ek_SenseManager CurrKnowledge;

    override
    void Init(){
        Result.CurrKnowledge=Ek_SenseManager.Create();
    }

    virtual
    bool, Vector3, Ek_EInfluence Sense()
    {return false, Owner.Pos, INF_None;}
}

class Ek_ReactorLobe:Ek_Lobe abstract{
    virtual
    bool React(Ek_Stimulus This)
    {return false;}
}

class Ek_PlannerLobe:Ek_Lobe abstract{
    virtual
    Name Plan()
    {return '';}
}

class Ek_ActuatorLobe:Ek_Lobe abstract{
    virtual
    bool Act(Name PlanOAction)
    {return false;}
}