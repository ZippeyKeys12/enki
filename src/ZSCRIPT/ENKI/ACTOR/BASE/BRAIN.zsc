class Ek_Brain play abstract{
    Ek_Actor Owner;

    Ek_Stack Stack;

    Ek_SensorLobe __Sense__;
    Ek_ReactorLobe __React__;
    Ek_PlannerLobe __Plan__;
    Ek_ActuatorLobe __Act__;

    static
    Ek_Brain Create(Class<Ek_Brain> Type, Ek_Actor Owner){
        Ek_Brain Result=Ek_Brain(new(Type));
        Result.Owner=Owner;
        Result.Stack=new('Ek_Stack');
        return Result;
    }

    virtual
    void Think(){
        Sense();
        Act(Plan());
    }

    virtual
    void Sense(){
        __Sense__.CurrKnowledge.Age();
        bool sensed;
        Vector3 influence;
        Ek_EInfluence type;
        [sensed, influence, type]=__Sense__.Sense();
        if(sensed)
            __Sense__.CurrKnowledge.AddInfluence(influence, type);
    }

    // TODO: Solidify architecture of reactor, planner and actuator lobes
    virtual
    void React(Ek_Stimulus Stim){
        __React__.React(Stim);
    }

    virtual
    Name Plan(){
        Name PlanOAction='';
        PlanOAction=__Plan__.Plan();
        if(PlanOAction)
            return PlanOAction;
        return '';
    }

    virtual
    bool Act(Name PlanOAction){
        if(PlanOAction=='')
            return false;
        return __Act__.Act(PlanOAction);
    }
}