class Ek_Actor:Actor{
    Class<Ek_Brain> BrainName;

    Ek_Brain Brain;

    Property Brain: BrainName;
    
    [Property]{
        [Ek_Actor]
        Brain='Ek_Brain';
    }

    override
    void BeginPlay(){
        super.BeginPlay();
        Brain=Ek_Brain.Create(BrainName, self);
    }

    virtual
    clearscope
    bool IsAlly(Actor Other) const
    {return Species==Other.Species;}

    virtual
    void Think()
    {Brain.Think();}
}

class zzz_brain:Ek_Brain{}

class ZZZ:Ek_Actor{
    Av_Plan Plan;

    [Property]{
        [Default]
        Radius=20;
        Height=56;
        [Type]
        Monster;
        [Ek_Actor]
        Brain='zzz_brain';
    }

    States{
        Spawn:
            POSS A 1{
                if(!target)
                    target=ZPlayer(ThinkerIterator.Create('ZPlayer', STAT_DEFAULT).Next());

                // if(CheckSight(Target)){
                //     Plan=null;
                //     A_MoveTo();
                // }else{
                if(target){
                    A_Star();
                    if(plan && plan.Size() && plan.Peek() && plan.Peek(1)){
                        if(level.Vec3Diff(pos, Ek_NavLine(plan.Peek().EdgeTo(plan.Peek(1))).Midpoint).Length()<radius+3){
                            plan.Pop();
                            console.printf("yesx!");
                        }
                        if(plan.Size()>0){
                            console.printf(Ek_NavSector(plan.Peek()).ref.Index().."aa");
                            vel=Seek(Ek_NavLine(plan.Peek().EdgeTo(plan.Peek(1))).Midpoint);
                        }
                    }else{
                        plan=null;
                        vel=Seek(target.pos);
                    }
                }
                // }
            }
            loop;
    }

    override
    void Tick(){
        super.Tick();
        Angle=ATan2(Vel.Y, Vel.X);
    }

    void A_Star(Actor target=null, int type=0){
        if(!target){
            if(self.target)
                target=self.target;
            else return;
        }

        Plan=Ek_Manager.Instance().navMesh.GetPath(curSector, target.curSector);

        // ActorIterator it=ActorIterator.Create(TID_NODES, "ZPathMarker");
        // double New,
        //        LastStart=double.MAX,
        //        LastTarget=double.MAX;
        // ZPathMarker Start, Goal, Marker;

        // while(Marker=ZPathMarker(it.Next())){
        //     if((New=Distance2D(Marker)+Marker.Distance2D(Target))<LastStart && CheckSight(Marker)){
        //         Start=Marker;
        //         LastStart=New;
        //     }
        //     if(New<LastTarget && Target.CheckSight(Marker)){
        //         Goal=Marker;
        //         LastTarget=New;
        //     }
        // }
        // Plan=Ek_Manager.Instance().Graph(0).GetPlan(Start.Node, Goal.Node);
    }
}