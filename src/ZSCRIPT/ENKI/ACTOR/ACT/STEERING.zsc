extend
class Ek_Actor{
    bool CanFly;

    double MaxSpeed;

    Property CanFly: CanFly;
    Property MaxSpeed: MaxSpeed;

    [Property]{
        [Ek_Actor]
        CanFly=true;
        MaxSpeed=50;
    }

    Vector3 Steer(Vector3 ideal)
    {return ideal-Vel;}

    Vector3 Seek(Vector3 target){
        Vector3 vec=level.Vec3Diff(target, Pos);
        if(!CanFly)
            vec=(vec.x, vec.y, 0);
        return vec.Unit()*MaxSpeed;
    }

    Vector3 Arrive(Vector3 target, double stoppingRadius){
        Vector3 vec=level.Vec3Diff(target, Pos);
        if(!CanFly)
            vec=(vec.x, vec.y, 0);
        double dist=vec.Length();
        vec=Min(maxspeed*(dist/stoppingRadius), maxspeed)/dist*vec;
    }

    Vector3 Pursue(Vector3 target, Vector3 vel)
    {return Seek(target+vel);}

    Vector3 Flee(Vector3 target)
    {return -Seek(target);}

    Vector3 Evade(Vector3 Target, Vector3 vel)
    {return Flee(Target+vel);}
}